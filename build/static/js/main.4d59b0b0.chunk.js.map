{"version":3,"sources":["components/selectable-conversor.js","components/home-screen.js","App.js","serviceWorker.js","index.js"],"names":["SelectableConversor","props","state","moedaA","moedaB","moedaA_valor","moedaB_valor","cotacao","converter","bind","de_para","this","console","log","url","fetch","then","res","json","parseFloat","toFixed","setState","className","Container","fluid","Row","Col","Card","Body","Title","name","onChange","event","target","value","Text","InputGroup","size","Prepend","Form","Control","type","aria-label","Button","variant","onClick","Component","HomeScreen","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4d59b0b0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport Button from 'react-bootstrap/Button';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport { Form } from 'react-bootstrap';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\n\r\n\r\nexport default class SelectableConversor extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            moedaA: \"EUR\",\r\n            moedaB: \"BRL\",\r\n            moedaA_valor: \"\",\r\n            moedaB_valor: \"\",\r\n            cotacao: \"\"\r\n        }\r\n        this.converter = this.converter.bind(this)\r\n    }\r\n\r\n    converter(){\r\n        let de_para = `${this.state.moedaA}_${this.state.moedaB}`;\r\n        console.log(de_para);\r\n\r\n        let url = `https://free.currconv.com/api/v7/convert?q=${de_para}&compact=ultra&apiKey=dd40fadf332371d82d64`\r\n        \r\n        fetch(url)\r\n        .then(res => {\r\n            return res.json()\r\n        })\r\n        .then(json => {\r\n            let cotacao = json[de_para];\r\n            let moedaB_valor = (parseFloat(this.state.moedaA_valor) * cotacao).toFixed(2);\r\n            this.setState({ moedaB_valor })\r\n            this.setState({ cotacao })\r\n            console.log(cotacao);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"selectable-conversor\">\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col>\r\n                            <Card className=\"my-4\">\r\n                                <Card.Body className=\"rounded\">\r\n                                    <Card.Title>Select the Currencies</Card.Title>\r\n                                    <select name=\"select\" className=\"rounded p-2 mt-2 mr-5\" onChange = {(event) => {this.setState({moedaA:event.target.value})}}> \r\n                                        <option value=\"EUR\">EUR</option>\r\n                                        <option value=\"BRL\">BRL</option>\r\n                                        <option value=\"USD\">USD</option>\r\n                                        <option value=\"GBP\">GBP</option>\r\n                                        <option value=\"AUD\">AUD</option>\r\n                                        <option value=\"JPY\">JPY</option>\r\n                                        <option value=\"CHF\">CHF</option>\r\n                                        <option value=\"NZD\">NZD</option>\r\n                                    </select>\r\n                                    <select name=\"select\"  className=\"rounded p-2\" onChange = {(event) => {this.setState({moedaB:event.target.value})}}> \r\n                                        <option value=\"BRL\">BRL</option>\r\n                                        <option value=\"EUR\">EUR</option>\r\n                                        <option value=\"USD\">USD</option>\r\n                                        <option value=\"GBP\">GBP</option>\r\n                                        <option value=\"AUD\">AUD</option>\r\n                                        <option value=\"JPY\">JPY</option>\r\n                                        <option value=\"CHF\">CHF</option>\r\n                                        <option value=\"NZD\">NZD</option>\r\n                                    </select>\r\n                                    <Card.Text className=\"my-4\">\r\n                                        I wanna exchange {this.state.moedaA} to {this.state.moedaB}\r\n                                    </Card.Text>\r\n                                    <Row>\r\n                                        <Col></Col>\r\n                                        <Col className=\"col-9\">\r\n                                            <InputGroup size=\"md\" className=\"px-3\">\r\n                                                <InputGroup.Prepend>\r\n                                                    <InputGroup.Text>Amount</InputGroup.Text>\r\n                                                </InputGroup.Prepend>\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    aria-label=\"Amount (to the nearest dollar)\"\r\n                                                    onChange = {(event) => {this.setState({moedaA_valor:event.target.value})}}\r\n                                                />\r\n                                            </InputGroup>\r\n                                        </Col>\r\n                                        <Col></Col>\r\n                                    </Row>\r\n                                    <Button variant=\"primary\" className=\"my-4\" onClick = {this.converter}>Converter</Button>\r\n                                    <Card.Text>\r\n                                        Total amount converted: <strong>{this.state.moedaB_valor}</strong>\r\n                                    </Card.Text>\r\n                                    <Card.Text>\r\n                                        Rate: <strong>{this.state.cotacao}</strong>\r\n                                    </Card.Text>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                        \r\n                    </Row>\r\n                </Container>\r\n                \r\n            </div>\r\n            \r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport SelectableConversor from './selectable-conversor';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n\r\n\r\nexport default class HomeScreen extends Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SelectableConversor></SelectableConversor>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\n\nimport './App.css';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport HomeScreen from './components/home-screen';\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n\n\n\nfunction App() {\n  return (\n    <Container fluid>\n      <Row>\n        <Col>\n          <div className=\"App\">\n            <HomeScreen></HomeScreen>      \n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}